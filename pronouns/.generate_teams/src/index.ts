import data from "../data.json" assert { type: "json" };

const AUTOGENERATED_MESSAGE =
  "# Autogenerated by https://github.com/mcpeachpies/mcpeachpies-datapacks/blob/master/pronouns/.generate_teams";

let setupTeams: string[] = [AUTOGENERATED_MESSAGE];

function createTeam(
  name: string,
  prefix: string | undefined,
  suffix: string,
  color: string | undefined
) {
  setupTeams.push(`team add ${name}`);
  if (prefix)
    setupTeams.push(
      `team modify ${name} prefix ["",{"text":"${prefix} ","color":"${
        color || "reset"
      }"}]`
    );
  setupTeams.push(
    `team modify ${name} suffix ["",{"text":"${suffix}","color":"gray"}]`
  );
  if (color) setupTeams.push(`team modify ${name} color ${color}`);
}

[...data.teams.values()].forEach((team) => {
  data.pronouns.single.forEach((single) => {
    createTeam(
      `${team.name}_${single}`,
      team.prefix,
      ` [${single}]`,
      team.color
    );
    createTeam(
      `afk_${team.name}_${single}`,
      team.prefix,
      ` [${single}]`,
      "gray"
    );
  });
  data.pronouns.pairs.forEach((x) => {
    data.pronouns.pairs.forEach((y) => {
      if (x != y) {
        createTeam(
          `${team.name}_${x}_${y}`,
          team.prefix,
          ` [${x}/${y}]`,
          team.color
        );
        createTeam(
          `afk_${team.name}_${x}_${y}`,
          team.prefix,
          ` [${x}/${y}]`,
          "gray"
        );
      }
    });
  });
  data.pronouns.triples.forEach((x) => {
    data.pronouns.triples.forEach((y) => {
      data.pronouns.triples.forEach((z) => {
        if (x != y && y != z && x != z) {
          createTeam(
            `${team.name}_${x}_${y}_${z}`,
            team.prefix,
            ` [${x}/${y}/${z}]`,
            team.color
          );
          createTeam(
            `afk_${team.name}_${x}_${y}_${z}`,
            team.prefix,
            ` [${x}/${y}/${z}]`,
            "gray"
          );
        }
      });
    });
  });
});

console.log(
  `Created ${
    (setupTeams.length - 1) / 4
  } teams for Pronouns, Existence SMP Handler, & AFK Detector`
);
Deno.writeTextFile("./out/exi/setup_team.mcfunction", setupTeams.join("\n"));

setupTeams = [AUTOGENERATED_MESSAGE];

data.pronouns.single.forEach((single) => {
  createTeam(`afk_mpp_prn_${single}`, "[AFK]", ` [${single}]`, "gray");
});
data.pronouns.pairs.forEach((x) => {
  data.pronouns.pairs.forEach((y) => {
    if (x != y) {
      createTeam(`afk_mpp_prn_${x}_${y}`, "[AFK]", ` [${x}/${y}]`, "gray");
    }
  });
});
data.pronouns.triples.forEach((x) => {
  data.pronouns.triples.forEach((y) => {
    data.pronouns.triples.forEach((z) => {
      if (x != y && y != z && x != z) {
        createTeam(
          `afk_mpp_prn_${x}_${y}_${z}`,
          "[AFK]",
          ` [${x}/${y}/${z}]`,
          "gray"
        );
      }
    });
  });
});

console.log(
  `Created ${(setupTeams.length - 1) / 4} teams for Pronouns & AFK Detector`
);
Deno.writeTextFile("./out/afk/setup_team.mcfunction", setupTeams.join("\n"));

setupTeams = [AUTOGENERATED_MESSAGE];

data.pronouns.single.forEach((single) => {
  createTeam(`mpp_prn_${single}`, undefined, ` [${single}]`, undefined);
});
data.pronouns.pairs.forEach((x) => {
  data.pronouns.pairs.forEach((y) => {
    if (x != y) {
      createTeam(`mpp_prn_${x}_${y}`, undefined, ` [${x}/${y}]`, undefined);
    }
  });
});
data.pronouns.triples.forEach((x) => {
  data.pronouns.triples.forEach((y) => {
    data.pronouns.triples.forEach((z) => {
      if (x != y && y != z && x != z) {
        createTeam(
          `mpp_prn_${x}_${y}_${z}`,
          undefined,
          ` [${x}/${y}/${z}]`,
          undefined
        );
      }
    });
  });
});

console.log(`Created ${(setupTeams.length - 1) / 2} teams for Pronouns`);
Deno.writeTextFile("./out/setup_team.mcfunction", setupTeams.join("\n"));

setupTeams = [AUTOGENERATED_MESSAGE];

data.pronouns.single.forEach((single) => {
  setupTeams.push(
    `team join mpp_prn_${single} @s[scores={mpp_select_pronouns=${setupTeams.length}}]`
  );
});
data.pronouns.pairs.forEach((x) => {
  data.pronouns.pairs.forEach((y) => {
    if (x != y) {
      setupTeams.push(
        `team join mpp_prn_${x}_${y} @s[scores={mpp_select_pronouns=${setupTeams.length}}]`
      );
    }
  });
});
data.pronouns.triples.forEach((x) => {
  data.pronouns.triples.forEach((y) => {
    data.pronouns.triples.forEach((z) => {
      if (x != y && y != z && x != z) {
        setupTeams.push(
          `team join mpp_prn_${x}_${y}_${z} @s[scores={mpp_select_pronouns=${setupTeams.length}}]`
        );
      }
    });
  });
});
setupTeams.push(
  "scoreboard players set @a[scores={mpp_select_pronouns=1..}] mpp_select_pronouns 0"
);
Deno.writeTextFile("./out/check_team.mcfunction", setupTeams.join("\n"));

console.log(`Check ./out for setup files`);
